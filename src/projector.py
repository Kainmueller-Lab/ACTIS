import torch
from torch import nn
import numpy as np
import warnings
import math
import torch.nn.functional as F

class NormLayer(nn.Module):
    def __init__(self, dim, p):
        super().__init__()
        self.dim = dim
        self.p = p
    def forward(self, x):
        return F.normalize(x,dim=self.dim,p=self.p)

class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x

def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


class DINOHead(nn.Module):
    def __init__(self, in_channels, out_channels, use_bn=False, norm_last_layer=True, nlayers=3, hidden_channels=2048, bottleneck_channels=256):
        super().__init__()
        nlayers = max(nlayers, 1)
        if nlayers == 1:
            self.mlp = nn.Conv2d(in_channels, bottleneck_channels, kernel_size=(1,1), padding='valid')
        else:
            layers = [nn.Conv2d(in_channels, hidden_channels, kernel_size=(1,1), padding='valid')]
            if use_bn:
                layers.append(nn.BatchNorm2d(hidden_channels))
            layers.append(nn.GELU())
            for _ in range(nlayers - 2):
                layers.append(nn.Conv2d(hidden_channels, hidden_channels, kernel_size=(1,1), padding='valid'))
                if use_bn:
                    layers.append(nn.BatchNorm2d(hidden_channels))
                layers.append(nn.GELU())
            layers.append(nn.Conv2d(hidden_channels, bottleneck_channels, kernel_size=(1,1), padding='valid'))
            self.mlp = nn.Sequential(*layers)
        self.apply(self._init_weights)
        self.last_layer = nn.utils.weight_norm(nn.Conv2d(bottleneck_channels, out_channels, kernel_size=(1,1), padding='valid', bias=False))
        self.last_layer.weight_g.data.fill_(1)
        if norm_last_layer:
            self.last_layer.weight_g.requires_grad = False

    def _init_weights(self, m):
        if isinstance(m, nn.Conv2d):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Conv2d) and m.bias is not None:
                nn.init.constant_(m.bias, 0)

    def forward(self, x):
        x = self.mlp(x)
        x = nn.functional.normalize(x, dim=1, p=2) 
        x = self.last_layer(x)
        return x


def prep_projection_head(params):
    if params['projection_head'] == 'MLP':
        projector = torch.nn.Sequential(
                        NormLayer(dim=1, p=2),
                        torch.nn.Conv2d(in_channels=3, out_channels=1024, kernel_size=(1,1), padding='valid'),
                        torch.nn.ReLU(),
                        torch.nn.Conv2d(in_channels=1024, out_channels=params['embedding_dim'], kernel_size=(1,1), padding='valid'),
                        NormLayer(dim=1, p=2),
                        ).to(params['device'])
    elif params['projection_head'] == 'SHALLOW':
        projector = torch.nn.Sequential(
                        torch.nn.Conv2d(in_channels=3, out_channels=params['embedding_dim'], kernel_size=(1,1), padding='valid'),
                        NormLayer(dim=1, p=2),
                        ).to(params['device'])

    elif params['projection_head'] == 'DINO':
        projector = DINOHead(in_channels=3, out_channels=params['embedding_dim']).to(params['device'])
    
    projector.trainable = params['trainable_projector']
    return projector